{"version":3,"sources":["lib/config.ts","components/NavBar.tsx","components/UserBalance.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["supportedTokens","Mainnet","Testnet","process","REACT_APP_CHAIN_NAME","networkConfig","index","CHAIN_NAME","CHAIN_ID","REACT_APP_CHAIN_ID","RPC_PROTOCOL","REACT_APP_RPC_PROTOCOL","RPC_HOST","REACT_APP_RPC_HOST","RPC_PORT","REACT_APP_RPC_PORT","NavBar","_ref","appName","activeUser","onLogin","onLogout","react","navbar","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","RIGHT","accountName","buttons","className","Classes","MINIMAL","icon","onClick","text","UserBalance","card","interactive","elevation","Elevation","TWO","map","token","key","split","balance","Object","keys","sort","style","float","defaultState","loading","SendTest","props","_useState","useState","_useState2","slicedToArray","to","setTo","_useState3","_useState4","quantity","setQuantity","_useState5","_useState6","memo","setMemo","react_default","a","createElement","Fragment","html","inputGroup","leftIcon","onChange","input","currentTarget","value","defaultValue","transfer","assetout","AdminBox","_useState7","_useState8","setValue","updateOracle","doUpdate","UserStats","width","userStats","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_props$ual$chains$0$r","ual","chains","rpcEndpoints","protocol","host","port","state","objectSpread","rpc","JsonRpc","concat","updateAccountBalances","bind","assertThisInitialized","setState","asyncToGenerator","regenerator_default","mark","_callee","t","_t$split","_t$split2","tokenContract","tokenSymbol","balanceToken","_balanceToken$0$split","_balanceToken$0$split2","symbol","wrap","_context","prev","next","_this2","get_currency_balance","sent","JSON","stringify","defineProperty","t0","stop","_x","apply","arguments","get_table_rows","code","scope","table","res2","warn","_context2","role","showModal","tx","actions","account","name","authorization","actor","permission","data","from","signTransaction","broadcast","res","_context3","symbolToContract","symbolWanted","found","el","filter","_ref3","_ref4","Error","contract","net","fetch","signatureProvider","JsSignatureProvider","api","Api","textDecoder","TextDecoder","textEncoder","TextEncoder","transact","blocksBehind","expireSeconds","result","dir","setTimeout","_this3","error","_context4","usern","_this4","_context5","owner","_this5","_this6","logout","_this$state","display","justifyContent","marginTop","contractState","React","Component","Boolean","window","location","hostname","match","TestAppConsumer","withUAL","EXAMPLE_ENV","exampleNet","chainId","Number","scatter","Scatter","ReactDOM","render","ual_reactjs_renderer_dist","authenticators","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29a837c7.chunk.js","sourcesContent":["const supportedTokens = (() => {\n  const index: string = process.env.REACT_APP_CHAIN_NAME || \"Testnet\"\n  const obj: any = {\n    Mainnet: [\"eosio.token-EOS\", \"everipediaiq-IQ\"],\n    Testnet: [\n      \"eosio.token-EOS\",\n      \"eosusdcom111-UZD\",\n      \"dummytokens1-IQ\",\n      \"dummytokens1-UTG\",\n      \"dummytokens1-PTI\",\n      \"dummytokens1-OWN\",\n      \"vig111111111-VIG\"\n    ]\n  }\n  return obj[index]\n})()\n\nconst networkConfig = (() => {\n  const index: string = process.env.REACT_APP_CHAIN_NAME || \"Testnet\"\n  const obj: any = {\n    Mainnet: {\n      CHAIN_NAME: \"Mainnet\",\n      CHAIN_ID:\n        process.env.REACT_APP_CHAIN_ID ||\n        \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\",\n      RPC_PROTOCOL: process.env.REACT_APP_RPC_PROTOCOL || \"https\",\n      RPC_HOST: process.env.REACT_APP_RPC_HOST || \"nodes.get-scatter.com\",\n      RPC_PORT: process.env.REACT_APP_RPC_PORT || \"443\"\n    },\n    Testnet: {\n      CHAIN_NAME: \"Testnet\",\n      CHAIN_ID:\n        process.env.REACT_APP_CHAIN_ID ||\n        \"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f\",\n      RPC_PROTOCOL: process.env.REACT_APP_RPC_PROTOCOL || \"http\",\n      RPC_HOST: process.env.REACT_APP_RPC_HOST || \"127.0.0.1\",\n      RPC_PORT: process.env.REACT_APP_RPC_PORT || \"8888\"\n    }\n  }\n  return obj[index]\n})()\n\nexport { supportedTokens, networkConfig }\n","import * as React from \"react\"\nimport {\n  Alignment,\n  Button,\n  Classes,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n} from \"@blueprintjs/core\"\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\n\nfunction NavBar({ appName, activeUser, onLogin, onLogout }) {\n  return (\n    <Navbar>\n      <NavbarGroup align={Alignment.LEFT}>\n        <NavbarHeading>{appName || \"appName\"}</NavbarHeading>\n        <NavbarDivider />\n      </NavbarGroup>\n      <NavbarGroup align={Alignment.RIGHT}>\n        {activeUser !== null ? (\n          <>\n            <span>{activeUser && activeUser.accountName}</span>\n            <Button\n              className={Classes.MINIMAL}\n              icon=\"log-out\"\n              onClick={onLogout}\n            />\n          </>\n        ) : (\n          <Button\n            className={Classes.MINIMAL}\n            icon=\"log-in\"\n            text=\"Login\"\n            onClick={onLogin}\n          />\n        )}\n      </NavbarGroup>\n    </Navbar>\n  )\n}\n\nexport { NavBar }\n","import * as React from \"react\"\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\n\nimport { Button, Card, Elevation } from \"@blueprintjs/core\"\nimport { supportedTokens } from \"../lib/config\"\n\nfunction UserBalance({ activeUser }) {\n  return (\n    <Card interactive={true} elevation={Elevation.TWO}>\n      <h5>User tokens</h5>\n      <table className=\"bp3-html-table bp3-html-table-condensed\">\n        <tbody>\n          {activeUser === null ? (\n            <>\n              {supportedTokens.map(token => (\n                <tr key={token}>\n                  <td>--</td>\n                  <td>{token.split(\"-\")[1]}</td>\n                </tr>\n              ))}\n            </>\n          ) : null}\n\n          {activeUser && !activeUser.balance ? (\n            <>\n              {supportedTokens.map(token => (\n                <tr key={token}>\n                  <td>...</td>\n                  <td>{token.split(\"-\")[1]}</td>\n                </tr>\n              ))}\n            </>\n          ) : null}\n\n          {activeUser && activeUser.balance ? (\n            <>\n              {Object.keys(activeUser.balance)\n                .sort()\n                .map(token => (\n                  <tr key={token}>\n                    <td style={{ float: \"right\" }}>\n                      {activeUser.balance[token]}\n                    </td>\n                    <td>{token}</td>\n                  </tr>\n                ))}\n            </>\n          ) : null}\n        </tbody>\n      </table>\n    </Card>\n  )\n}\n\nexport { UserBalance }\n","import React, { Component, useState, useEffect } from \"react\"\nimport { supportedTokens } from \"./lib/config\"\nimport { Button, InputGroup, Label } from \"@blueprintjs/core\"\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"./App.css\"\n\nimport { JsonRpc } from \"eosjs\"\nimport { NavBar } from \"./components/NavBar\"\nimport { UserBalance } from \"./components/UserBalance\"\n\n// import Button from './components/Button'\n\n/// HACK\nimport { Api } from \"eosjs\"\nimport { JsSignatureProvider } from \"eosjs/dist/eosjs-jssig\" // development only\nimport { networkConfig } from \"./lib/config\"\n/// / HACK\n\nfunction Balance(props: any) {\n  const balance = props\n  return (\n    <span>\n      Balance: {balance.EOS} EOS _ {balance.EOSUSD} EOSUSD\n    </span>\n  )\n}\n\ninterface TransactionProps {\n  ual: any\n}\n\ninterface TransactionState {\n  appName: string\n  loading: boolean\n  activeUser: any\n  contractState?: any\n  userStats?: any\n  rpc: JsonRpc //JsonRpc // any\n}\n\nconst defaultState = {\n  appName: \"App\",\n  activeUser: null,\n  loading: false\n  // accountName: \"\",\n  // accountBalance: null\n}\n\nfunction SendTest(props) {\n  const [to, setTo] = useState(\"eosusdcom111\")\n  const [quantity, setQuantity] = useState(\"0.0001 EOS\")\n  const [memo, setMemo] = useState(\"support\")\n\n  return (\n    <>\n      <h2>Send test</h2>\n      <Label className=\"bp3-inline\">\n        To\n        <InputGroup\n          leftIcon=\"filter\"\n          onChange={input => setTo(input.currentTarget.value)}\n          defaultValue={to}\n        />\n      </Label>\n      <Label className=\"bp3-inline\">\n        Quantity\n        <InputGroup\n          leftIcon=\"filter\"\n          onChange={input => setQuantity(input.currentTarget.value)}\n          defaultValue={quantity}\n        />\n      </Label>\n      <Label className=\"bp3-inline\">\n        Memo\n        <InputGroup\n          leftIcon=\"filter\"\n          onChange={input => setMemo(input.currentTarget.value)}\n          defaultValue={memo}\n        />\n      </Label>\n      <p>support, collateral, payoff debt, borrow</p>\n      <Button\n        loading={props.loading}\n        onClick={() => {\n          props.transfer({\n            to: to,\n            quantity: quantity,\n            memo: memo\n          })\n        }}\n      >\n        Send\n      </Button>\n      <Button\n        loading={props.loading}\n        onClick={() => {\n          props.assetout({\n            quantity: quantity,\n            memo: memo\n          })\n        }}\n      >\n        Assetout\n      </Button>\n    </>\n  )\n}\n\nfunction AdminBox(props) {\n  const [value, setValue] = useState(\"63800\")\n  return (\n    <div>\n      <h2>Admin demo tools</h2>\n      <Button onClick={() => props.updateOracle(value)}>\n        Update Oracle Price\n      </Button>\n      <Button onClick={() => props.doUpdate()}>doUpdate</Button>\n      <Label className=\"bp3-inline\">\n        Value\n        <InputGroup\n          leftIcon=\"filter\"\n          onChange={input => setValue(input.currentTarget.value)}\n          defaultValue={value}\n        />\n      </Label>\n    </div>\n  )\n}\n\nfunction UserStats(props) {\n  return (\n    <div>\n      <h2>User smart contract stats</h2>\n      <div style={{ width: 200 }}>\n        {props.userStats ? <p>{props.userStats}</p> : null}\n      </div>\n    </div>\n  )\n}\n\n// NOTE: make me a function\nclass App extends React.Component<TransactionProps, TransactionState> {\n  activeUser: any\n  constructor(props) {\n    super(props)\n    console.log(\"props: \", props)\n    const { protocol, host, port } = props.ual.chains[0].rpcEndpoints[0]\n    this.state = {\n      ...defaultState,\n      rpc: new JsonRpc(`${protocol}://${host}:${port}`)\n    }\n    this.updateAccountBalances = this.updateAccountBalances.bind(this)\n    this.updateOracle = this.updateOracle.bind(this)\n    this.doUpdate = this.doUpdate.bind(this)\n\n    this.transfer = this.transfer.bind(this)\n    this.assetout = this.assetout.bind(this)\n  }\n\n  // TODO: hooks useRef()\n  componentDidUpdate() {\n    const {\n      ual: { activeUser }\n    } = this.props\n    if (activeUser && !this.state.activeUser) {\n      this.setState(\n        {\n          activeUser: {\n            ...this.activeUser,\n            accountName: activeUser.accountName\n          }\n        },\n        this.updateAccountBalances\n      )\n    } else if (!activeUser && this.state.activeUser) {\n      this.setState(defaultState)\n    }\n  }\n\n  async updateAccountBalances(): Promise<void> {\n    try {\n      const {\n        activeUser: { accountName }\n      } = this.state\n\n      supportedTokens.map(async t => {\n        try {\n          const [tokenContract, tokenSymbol] = t.split(\"-\")\n          // TODO: loop me\n          const balanceToken = await this.state.rpc.get_currency_balance(\n            tokenContract,\n            accountName,\n            tokenSymbol\n          )\n\n          console.log(JSON.stringify(balanceToken))\n          const [balance, symbol] = balanceToken[0].split(\" \")\n          this.setState({\n            activeUser: {\n              ...this.state.activeUser,\n              balance: { ...this.state.activeUser.balance, [symbol]: balance }\n            }\n          })\n        } catch (error) {\n          // NOTE: it raise an error if the user has not balance for a supported token\n          // console.warn(t, error)\n        }\n      })\n\n      // TODO: other function\n      // lower_bound: -1, upper_bound: upperBound, limit: limit\n      // const res = await this.state.rpc.get_table_by_scope({code:'eosusdcom111', table: \"stat\"});\n\n      //// Commented because of:\n      //// Error: Stream unexpectedly ended; unable to unpack field 'latepayments' of struct 'user_s'\n      // const res = await this.state.rpc.get_table_rows({\n      //   code: \"eosusdcom111\",\n      //   scope: \"UZD\",\n      //   table: \"globalstats\"\n      // })\n      // this.setState({\n      //   ...this.state,\n      //   contractState: JSON.stringify(res, null, 2)\n      // })\n\n      const res2 = await this.state.rpc.get_table_rows({\n        code: \"eosusdcom111\",\n        scope: \"eosusdcom111\",\n        table: \"user\"\n      })\n      this.setState({\n        ...this.state,\n        userStats: JSON.stringify(res2, null, 2)\n      })\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n\n  renderModalButton() {\n    return (\n      <p className=\"ual-btn-wrapper\">\n        <Button\n          role=\"button\"\n          onClick={this.props.ual.showModal}\n          className=\"ual-generic-button\"\n        >\n          Login\n        </Button>\n      </p>\n    )\n  }\n\n  // BUG: message: \"transaction declares authority '{\"actor\":\"XXXX\",\"permission\":\"active\"}', but does not have signatures for it.\"\n  async transferb() {\n    const { activeUser } = this.props.ual\n    const {\n      activeUser: { accountName }\n    } = this.state\n    console.log(\"a \", accountName, activeUser)\n    const tx = {\n      actions: [\n        {\n          // account: \"eosusdeosusd\",\n          account: \"eosio.token\",\n          name: \"transfer\",\n          authorization: [\n            {\n              actor: accountName,\n              permission: \"active\"\n            }\n          ],\n          data: {\n            from: accountName,\n            to: \"eosio.token\",\n            quantity: \"0.0001 EOS\",\n            memo: \"support\"\n          }\n        }\n      ]\n    }\n    // demoTransaction.actions[0].authorization[0].actor = accountName\n    // demoTransaction.actions[0].data.from = accountName\n    try {\n      const res = await activeUser.signTransaction(tx, { broadcast: true })\n      console.log(\"r\", res)\n      // this.updateAccountBalance()\n    } catch (error) {\n      console.warn(error)\n    }\n  }\n\n  // BUG: it shouldn't use eosjs without Scatter\n  async transfer({ to, quantity, memo }) {\n    try {\n      const {\n        activeUser: { accountName }\n      } = this.state\n      const from = accountName\n\n      // NOTE: move me in utils ??\n      function symbolToContract(quantity) {\n        const symbolWanted = quantity.split(\" \")[1]\n        const found = supportedTokens\n          .map(el => el.split(\"-\"))\n          .filter(([contract, symbol]) => {\n            return symbolWanted === symbol\n          })\n        return found[0]\n          ? found[0][0]\n          : new Error(`Token ${symbolWanted} not supported`)\n      }\n\n      const contract = symbolToContract(quantity)\n\n      const net = `${networkConfig.RPC_PROTOCOL}://${networkConfig.RPC_HOST}:${\n        networkConfig.RPC_PORT\n      }`\n      const rpc = new JsonRpc(net, { fetch })\n      const defaultPrivateKey = process.env.REACT_APP_PRIVATEKEY // testborrow11\n      const signatureProvider = new JsSignatureProvider([defaultPrivateKey])\n      const api = new Api({\n        rpc,\n        signatureProvider,\n        textDecoder: new TextDecoder(),\n        textEncoder: new TextEncoder()\n      })\n\n      this.setState({ ...this.state, loading: true })\n      console.warn(`TX: ${net} ${contract} ${from} ${to} ${quantity} ${memo}`)\n      const result = await api.transact(\n        {\n          actions: [\n            {\n              account: contract,\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: from,\n                  permission: \"active\"\n                }\n              ],\n              data: {\n                from: from,\n                to: to,\n                quantity: quantity,\n                memo: memo\n              }\n            }\n          ]\n        },\n        {\n          blocksBehind: 3,\n          expireSeconds: 30\n        }\n      )\n      console.dir(result)\n      // HACK: the tx isn't immediately effective\n      setTimeout(() => {\n        this.updateAccountBalances()\n        this.setState({ ...this.state, loading: false })\n      }, 1000)\n    } catch (error) {\n      this.setState({ ...this.state, loading: false })\n      console.error(\"ERROR: \", error)\n    }\n  }\n\n  // BUG: it shouldn't use eosjs without Scatter\n  async assetout({ quantity, memo }) {\n    try {\n      const {\n        activeUser: { accountName }\n      } = this.state\n      const contract = \"eosusdcom111\"\n      const to = accountName\n      const from = accountName\n\n      // // NOTE: move me in utils ??\n      // function symbolToContract(quantity) {\n      //   const symbolWanted = quantity.split(\" \")[1]\n      //   const found = supportedTokens\n      //     .map(el => el.split(\"-\"))\n      //     .filter(([contract, symbol]) => {\n      //       return symbolWanted === symbol\n      //     })\n      //   return found[0]\n      //     ? found[0][0]\n      //     : new Error(`Token ${symbolWanted} not supported`)\n      // }\n\n      // const contract = symbolToContract(quantity)\n\n      const net = `${networkConfig.RPC_PROTOCOL}://${networkConfig.RPC_HOST}:${\n        networkConfig.RPC_PORT\n      }`\n      const rpc = new JsonRpc(net, { fetch })\n      const defaultPrivateKey = process.env.REACT_APP_PRIVATEKEY // testborrow11\n      const signatureProvider = new JsSignatureProvider([defaultPrivateKey])\n      const api = new Api({\n        rpc,\n        signatureProvider,\n        textDecoder: new TextDecoder(),\n        textEncoder: new TextEncoder()\n      })\n\n      this.setState({ ...this.state, loading: true })\n      console.warn(`TX: ${net} ${contract} ${from} ${to} ${quantity} ${memo}`)\n      const result = await api.transact(\n        {\n          actions: [\n            {\n              account: contract,\n              name: \"assetout\",\n              authorization: [\n                {\n                  actor: from,\n                  permission: \"active\"\n                }\n              ],\n              data: {\n                usern: to,\n                assetout: quantity,\n                memo: memo\n              }\n            }\n          ]\n        },\n        {\n          blocksBehind: 3,\n          expireSeconds: 30\n        }\n      )\n      console.dir(result)\n      // HACK: the tx isn't immediately effective\n      setTimeout(() => {\n        this.updateAccountBalances()\n        this.setState({ ...this.state, loading: false })\n      }, 1000)\n    } catch (error) {\n      this.setState({ ...this.state, loading: false })\n      console.error(\"ERROR: \", error)\n    }\n  }\n\n  // cleos get table eosusdcom111 eosusdcom111 user\n  // async updateUserStats() {\n  //   try {\n  //     const {\n  //       activeUser: { accountName }\n  //     } = this.state\n\n  //     // TODO: other function\n  //     // lower_bound: -1, upper_bound: upperBound, limit: limit\n  //     // const res = await this.state.rpc.get_table_by_scope({code:'eosusdcom111', table: \"stat\"});\n  //     const res = await this.state.rpc.get_table_rows({\n  //       code: \"eosusdcom111\",\n  //       scope: \"eosusdcom111\",\n  //       table: \"user\"\n  //     })\n  //     this.setState({\n  //       ...this.state,\n  //       userStats: JSON.stringify(res, null, 2)\n  //     })\n  //   } catch (e) {\n  //     console.warn(e)\n  //   }\n  // }\n\n  //  cleos push action oracle111111 write '{\"owner\":\"feeder111111\", \"value\":63800}' -p feeder111111@active\n  async updateOracle(value) {\n    const from = \"feeder111111\"\n    const contract = \"oracle111111\"\n\n    const net = `${networkConfig.RPC_PROTOCOL}://${networkConfig.RPC_HOST}:${\n      networkConfig.RPC_PORT\n    }`\n    const rpc = new JsonRpc(net, { fetch })\n    const defaultPrivateKey = process.env.REACT_APP_PRIVATEKEY // feeder\n    const signatureProvider = new JsSignatureProvider([defaultPrivateKey])\n    const api = new Api({\n      rpc,\n      signatureProvider,\n      textDecoder: new TextDecoder(),\n      textEncoder: new TextEncoder()\n    })\n\n    // this.setState({ ...this.state, loading: true })\n    console.warn(`TX: ${net} ${contract} ${from} ${value}`)\n    const result = await api.transact(\n      {\n        actions: [\n          {\n            account: contract,\n            name: \"write\",\n            authorization: [\n              {\n                actor: from,\n                permission: \"active\"\n              }\n            ],\n            data: { owner: from, value: value }\n          }\n        ]\n      },\n      {\n        blocksBehind: 3,\n        expireSeconds: 30\n      }\n    )\n    console.dir(result)\n    // HACK: the tx isn't immediately effective\n    setTimeout(() => {\n      this.updateAccountBalances()\n      // this.setState({ ...this.state, loading: false })\n    }, 1000)\n  }\n\n  // cleos push action eosusdcom111 doupdate '{}' -p eosusdcom111@active\n\n  async doUpdate() {\n    const from = \"eosusdcom111\"\n    const contract = \"eosusdcom111\"\n\n    const net = `${networkConfig.RPC_PROTOCOL}://${networkConfig.RPC_HOST}:${\n      networkConfig.RPC_PORT\n    }`\n    const rpc = new JsonRpc(net, { fetch })\n    const defaultPrivateKey =\n      \"5K9sQVS3KAXe9ecBjs7PEmLXtE5mqvAVKRaytG3DN8aagWmMj4W\" // eosusdcom111\n    const signatureProvider = new JsSignatureProvider([defaultPrivateKey])\n    const api = new Api({\n      rpc,\n      signatureProvider,\n      textDecoder: new TextDecoder(),\n      textEncoder: new TextEncoder()\n    })\n\n    // this.setState({ ...this.state, loading: true })\n    console.warn(`TX: ${net} ${contract} ${from} `)\n    const result = await api.transact(\n      {\n        actions: [\n          {\n            account: contract,\n            name: \"doupdate\",\n            authorization: [\n              {\n                actor: from,\n                permission: \"active\"\n              }\n            ],\n            data: {}\n          }\n        ]\n      },\n      {\n        blocksBehind: 3,\n        expireSeconds: 30\n      }\n    )\n    console.dir(result)\n    // HACK: the tx isn't immediately effective\n    setTimeout(() => {\n      this.updateAccountBalances()\n      // this.setState({ ...this.state, loading: false })\n    }, 1000)\n  }\n\n  render() {\n    const {\n      ual: { logout }\n    } = this.props\n\n    const { activeUser, appName } = this.state\n\n    return (\n      <div className=\"App\">\n        <NavBar\n          appName={appName}\n          activeUser={activeUser}\n          onLogin={this.props.ual.showModal}\n          onLogout={logout}\n        />\n\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n          <div>\n            <UserBalance activeUser={activeUser} />\n          </div>\n          <div>\n            <SendTest\n              loading={this.state.loading}\n              transfer={this.transfer}\n              assetout={this.assetout}\n            />\n          </div>\n          <div>\n            <AdminBox\n              updateOracle={this.updateOracle}\n              doUpdate={this.doUpdate}\n            />\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            marginTop: -4\n          }}\n        >\n          <div />\n          <UserStats userStats={this.state.userStats} />\n          <div>\n            <h2>Global smart contract stats</h2>\n            {this.state.contractState ? (\n              <div style={{ width: 200 }}>\n                <p>{this.state.contractState}</p>\n              </div>\n            ) : null}\n          </div>\n        </div>\n\n        {/* Version: {this.props.appVersion} Network: {this.props.chainName} */}\n        {/* {modalButton} */}\n        <p>{/* <Balance {...this.state.balance} /> */}</p>\n        {/* <p>\n          Attaching to Scatter.. <Button>Click me</Button>\n        </p> */}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { Scatter } from \"ual-scatter\"\nimport { UALProvider, withUAL } from \"ual-reactjs-renderer\"\nimport { networkConfig } from \"./lib/config\";\n\nconst TestAppConsumer = withUAL(App)\n\n// NOTE: Use .env to override\nconst EXAMPLE_ENV = networkConfig\nconsole.log(\"EXAMPLE_ENV \", EXAMPLE_ENV)\n\nconst exampleNet = {\n  chainId: EXAMPLE_ENV.CHAIN_ID,\n  rpcEndpoints: [\n    {\n      protocol: EXAMPLE_ENV.RPC_PROTOCOL,\n      host: EXAMPLE_ENV.RPC_HOST,\n      port: Number(EXAMPLE_ENV.RPC_PORT)\n    }\n  ]\n}\n\nconst appName = \"Vigor App\"\nconst scatter = new Scatter([exampleNet], { appName })\n\nReactDOM.render(\n  <UALProvider\n    chains={[exampleNet]}\n    authenticators={[scatter]}\n    appName={appName}\n    // TODO: pass to App\n    // appVersion={process.env.REACT_APP_VERSION}\n    // chainName={EXAMPLE_ENV.CHAIN_NAME}\n  >\n    <TestAppConsumer />\n  </UALProvider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}